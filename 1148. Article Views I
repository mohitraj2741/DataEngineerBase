Table: Views

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| article_id    | int     |
| author_id     | int     |
| viewer_id     | int     |
| view_date     | date    |
+---------------+---------+
There is no primary key (column with unique values) for this table, the table may have duplicate rows.
Each row of this table indicates that some viewer viewed an article (written by some author) on some date. 
Note that equal author_id and viewer_id indicate the same person.
 

Write a solution to find all the authors that viewed at least one of their own articles.

Return the result table sorted by id in ascending order.

The result format is in the following example.

 

Example 1:

Input: 
Views table:
+------------+-----------+-----------+------------+
| article_id | author_id | viewer_id | view_date  |
+------------+-----------+-----------+------------+
| 1          | 3         | 5         | 2019-08-01 |
| 1          | 3         | 6         | 2019-08-02 |
| 2          | 7         | 7         | 2019-08-01 |
| 2          | 7         | 6         | 2019-08-02 |
| 4          | 7         | 1         | 2019-07-22 |
| 3          | 4         | 4         | 2019-07-21 |
| 3          | 4         | 4         | 2019-07-21 |
+------------+-----------+-----------+------------+
Output: 
+------+
| id   |
+------+
| 4    |
| 7    |
+------+


sql soln:

select distinct(author_id) as id from Views where 
author_id = viewer_id  order by author_id asc

pandas:

import pandas as pd

# Filter rows where author_id == viewer_id
filtered_df = df[df['author_id'] == df['viewer_id']]

# Get distinct author_id values and rename the column to 'id'
result = filtered_df[['author_id']].drop_duplicates().rename(columns={'author_id': 'id'})

# Sort ascending
result = result.sort_values('id').reset_index(drop=True)

pyspark:

from pyspark.sql.functions import col

# Filter and select distinct author_id where author_id == viewer_id
result = (
    df.filter(col("author_id") == col("viewer_id"))
      .select("author_id")
      .distinct()
      .withColumnRenamed("author_id", "id")
      .orderBy("id")
)
